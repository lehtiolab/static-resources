singularity {
  enabled = true
}

env {
  SLURM_CLUSTERS="${params.cluster}"
}

// Rackham: lots of 20 core nodes with 256G RAM
// Snowy: 8-core nodes with 128G RAM


process {
  executor = 'slurm'
  clusterOptions = { "-A $params.project ${params.clusterOptions ?: ''}" }
  errorStrategy = { task.exitStatus in [140, 250, 247] ? 'retry': 'finish'}
  maxRetries: 3
  time = { 2.h * task.attempt }

  //scratch = '$SNIC_TMP'

  withName: createSpectraLookup {
    time = { check_max( 0.05.h * mzmlfiles.size(), 'time' ) }
  }
  withName: msgfPlus {
  // strings are compared in max mem at the lowest unit, so use B and sec here, or else 
  // it will somehow return the max value instead
    memory = { check_max( (db.size() >> 30) < 1 ? 16.GB : "${db.size() * 16}B", 'memory')  } 
    time = { check_max( (spectra.size() >> 20) < 2500 ? task.attempt * 2.h : "${(spectra.size() >> 20) * 4 * task.attempt} sec", 'time' ) }
    cpus = 4
  }
  
  withName: percolator {
    cpus = { check_max(mzids.size() < 100 ? 2 : Math.ceil(mzids.size() / 200), 'cpus') }
    memory = { mzids.size() < 100 ? 5.GB : check_max("${mzids.size() / 20}G", 'memory')  } 
    // 3h per 100 mzid
    time = { check_max( mzids.size() < 100 ? task.attempt * 3.h : "${mzids.size() * 108 * task.attempt} sec", 'time' ) }

  }
}

// Rackham params
params {
  clusterOptions = false
  cluster = 'rackham'
  project = false
  saveReference = true
  // Max resources requested by a normal node on rackham. 
  // If you need more memory, run on a fat node using:
  //   --clusterOptions "-C mem512GB" --max_memory "512GB"
  max_memory = 125.GB
  max_cpus = 20
  max_time = 240.h
  // illumina iGenomes reference file paths on UPPMAX
  igenomes_base = '/sw/data/uppnex/igenomes/'
}
