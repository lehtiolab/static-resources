params {
  overbook_cpus_factor = 2
}

trace {
  enabled = true
  file = './trace.txt'
  overwrite = true
}

executor {
  name = 'slurm'
}

docker.enabled = true
docker.fixOwnership = true
singularity.enabled = false
conda.enabled = false



def listify(it) {
  /* This function is useful when needing a list even when having a single item
  - Single items in channels get unpacked from a list
  - Processes expect lists. And here the config for percolator needs a list.
  See:
  https://github.com/nextflow-io/nextflow/discussions/4240

  This function is also in pipelines sometimes, and that will override the definition here
  */
  return it instanceof java.util.List ? it : [it]
}


process {
  withName: get_software_versions {
    errorStrategy = { task.exitStatus == 141 ? 'retry' : 'finish' }
    maxRetries = 5
  }
  withName: createNewSpectraLookup {
    time = { mzmlfiles.size() > 100 ? check_max( 0.02.h * mzmlfiles.size() * task.attempt, 'time' ) : 2.h * task.attempt}
  }
  withName: quantifySpectra {
    maxForks = 10
    memory = { (infile.size() >> 30) > 5 ? check_max(infile.size() * 4 as nextflow.util.MemoryUnit, 'memory') : '16 GB'}
    time = { check_max( 1.h * (infile.size() >> 30) * task.attempt, 'time' ) }
  }
  withName: quantifyMS1 {
    cpus = 4
  }
  withName: msgfPlus {
    maxForks = 20
    cpus = 4
    memory = { (db.size() >> 30) < 1 ? 16.GB : "${db.size() * 16}B"  }
    //time = { (mzml.size() >> 30) < 2 ? 2.h : "${1 + mzml.size() >> 30}h" }
    time = { (infile.size() >> 30) < 2 ? 2.h : "${1 + infile.size() >> 30}h" }
  }
  withName: quantLookup {
    time = { check_max( 0.1.h * isofns.size() * task.attempt, 'time' ) }
    memory = '32 GB'
  }
  withName: createPSMTable {
    time = { listify(psms).size() > 500 ? check_max( 0.008.h * listify(psms).size() * task.attempt, 'time' ) : 2.h * task.attempt }
  }
  withName: percolator {
    time = { listify(mzids).size() > 40 ? check_max( 0.1.h * listify(mzids).size() * task.attempt , 'time' ) : 4.h * task.attempt }
    cpus = 4
  }
  withName: proteinPeptideSetMerge {
    cpus = { params.deqms ? 24 : 1}
// time increase for peptide merger, has slower SQL now!
  }
  withName: luciphorPTMLocalizationScoring {
    time = { check_max( (allpsms.size() >> 20) * 0.0067.h * task.attempt, 'time') }
    cpus = 2
  }
}
